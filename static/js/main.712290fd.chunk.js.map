{"version":3,"sources":["images/default_quote4.jpg","images/lagbaja.jpg","images/fawzy.jpg","images/lade.jpg","components/dateComponent.js","components/buttonComponent.js","components/formComponent.js","components/imgComponent.js","componentHolder/componentsHolder.js","rqgApp.js","serviceWorker.js","index.js"],"names":["module","exports","CurrentDay","props","date","getDate","state","Date","getDay","getMonth","getYear","getUTCFullYear","getTime","toLocaleTimeString","this","intervalID","setInterval","setState","clearInterval","curr_day","curr_month","style","fontSize","Component","ButtonQuote","showQuote","checkSelection","id","type","onClick","clickBtn","FormComponent","className","onChange","newSelection","value","changeQuote","ImagesComponent","imgOne","src","alt","ComponentHolder","event","selectedCategory","target","imgUrl","default_quote","lagbaja","fawzy","lade","i","length","isLoading","character","fetch","then","response","json","data","title","media","RandomQuotes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.712290fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default_quote4.8d3ac6ee.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lagbaja.3c10386c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fawzy.4456f9dc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lade.fc589a4d.jpg\";","import React, {Component} from 'react';\r\n\r\nclass CurrentDay extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            getDate: new Date().getDate(),\r\n            getDay: new Date().getDay(),\r\n            getMonth: new Date().getMonth(),\r\n            getYear: new Date().getUTCFullYear(),\r\n            getTime: new Date().toLocaleTimeString()\r\n        }\r\n    }\r\n\r\n   \r\n    componentDidMount () {\r\n        this.intervalID = setInterval( () => this.setState({\r\n            getTime: new Date().toLocaleTimeString()}), 1000)\r\n    }\r\n\r\n    componentWillMount() {\r\n        clearInterval(this.intervalID);\r\n    }\r\n\r\n    date = () => {\r\n        const {getDate} = this.state;\r\n        if (getDate < 10) {\r\n            return '0' + getDate;\r\n        }\r\n        else{\r\n            return getDate\r\n        }\r\n        // getDate < 10 ? '0' + getDate : getDate;\r\n    }\r\n\r\n\r\n    render(){\r\n        const day_names = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday',\r\n                            'Friday', 'Saturday'];\r\n        const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \r\n                            \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n        const {getDay, getMonth, getYear} = this.state;\r\n        // const getDate = time.getDate();\r\n        // const getDay = time.getDay();\r\n        // const getMonth = time.getMonth();\r\n        // const getYear = time.getUTCFullYear();\r\n        const curr_day = day_names[getDay];\r\n        const curr_month = months[getMonth];\r\n        // const localeTime = time.toLocaleTimeString();\r\n\r\n        \r\n        return (\r\n            <section>\r\n                <p style={{fontSize:\"20px\"}}> Today: {curr_day}, {this.date()} {curr_month} {getYear} | {this.state.getTime}</p>\r\n            </section>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default CurrentDay;","import React, {Component} from 'react';\r\n// import ImagesComponent from '../components/imgComponent';\r\n// import lagbaja from '../images/lagbaja.jpg';\r\n// import quote3 from '../images/default_quote3.jpg';\r\n\r\nclass ButtonQuote extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            // action: null,\r\n            // images: [lagbaja, quote3]\r\n        }\r\n\r\n    }\r\n\r\n    showQuote = () => {\r\n        \r\n        // let {images} = this.state;\r\n        // let index = Math.floor(Math.random() * images.length);\r\n        // document.getElementById('quoteSection').innerHTML = images[index];\r\n    }\r\n\r\n    checkSelection = () => {\r\n        // const { showQuoteBtn } = this.props;\r\n        // const {selectedCategory} = this.props;\r\n        // selectedCategory =='Choose Category' && randomNum == 0 ? imgUrl[0] : imgUrl[randomNum]\r\n        // let randomNum = Math.floor(Math.random() * {...showQuoteBtn}.length);\r\n        // const divSelect = document.getElementById('categories').value;\r\n        \r\n        // if(divSelect !== 'Choose Category'){\r\n        //     alert('hjk');\r\n        // }\r\n        }\r\n\r\n  \r\n\r\n    render(){\r\n        // const { clickBtn } = this.props;\r\n        return (\r\n            <span id=\"btnQuote\">\r\n                <button type=\"button\" onClick={this.props.clickBtn}>Show quote</button>\r\n            </span>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default ButtonQuote;","import React, {Component} from 'react';\r\nimport ButtonQuote from '../components/buttonComponent'\r\n\r\n\r\nclass FormComponent extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n    }\r\n    \r\n    // newSelection = (category) =>  {\r\n    //     const {defaultQuote, selectedCategory} = this.state;\r\n        // let randomNum = Math.floor(Math.random() * selectedCategory.length);\r\n        // if (selectedCategory[randomNum] == defaultQuote) {\r\n        //     alert('hghk');\r\n        // }\r\n        // else{\r\n        //     // const {selectedCategory} = this.state;\r\n        //     // selectedCategory.push(category);\r\n        //     alert('ggjh');\r\n        // }\r\n       \r\n    // }\r\n\r\n    \r\n   \r\n    \r\n    render(){\r\n\r\n        return (\r\n            <form className=\"field-select\"  >\r\n              {/* <input type=\"text\" id=\"quoteSelected\" placeholder=\"Choose categories..\" /> */}\r\n                <select id=\"categories\" onChange={this.props.newSelection}>\r\n                    <option value='Choose Category'> Choose Category</option>\r\n                    <option value='islamic'> Islamic quotes </option> \r\n                    <option value='motivational'> Motivational quotes </option> \r\n                    <option value='success'> Success quotes </option> \r\n                    <option value='marriage'> Marriage quotes </option> \r\n                    <option value='forgiveness'> Forgiveness quotes </option> \r\n                    <option value='healing'> Healing quotes </option> \r\n                </select>\r\n              \r\n              <ButtonQuote clickBtn={this.props.changeQuote} />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FormComponent;","import React, {Component} from 'react';\r\n\r\n\r\nclass ImagesComponent extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    // checkQuote = () => {\r\n    //     const {selectedCategory, imgOne} = this.props; \r\n\r\n        // for (let i = 0; i < imgUrl.length; i++){\r\n            // if (selectedCategory == 'Choose Category' && imgOne == 'default_quote') {\r\n            //     return imgOne;\r\n            // }\r\n            // else {\r\n            //     return imgOne;\r\n            // }\r\n            // else{\r\n            //     alert('others');\r\n            // }\r\n        // } \r\n        \r\n    // }\r\n\r\n    // componentDidMount(props, state){\r\n    //     setTimeout( () => this.checkQuote, 1000);\r\n    // }\r\n\r\n   \r\n    render(){\r\n       const {imgOne} = this.props\r\n        return (\r\n            <div className=\"quoteDiv\" id=\"quoteSection\">\r\n                <img src={imgOne} className=\"default-quote\" alt=\"default_quote\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ImagesComponent;","import React, {Fragment} from 'react';\r\nimport {Component} from 'react';\r\nimport CurrentDay from '../components/dateComponent';\r\nimport FormComponent from '../components/formComponent';\r\nimport ImagesComponent from '../components/imgComponent';\r\nimport default_quote from '../images/default_quote4.jpg';\r\nimport lagbaja from '../images/lagbaja.jpg';\r\nimport fawzy from '../images/fawzy.jpg';\r\nimport lade from '../images/lade.jpg';\r\n\r\n\r\nclass ComponentHolder extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedCategory: ['Choose Category'],\r\n            imgOne: default_quote,\r\n            isLoading: true,\r\n            // person: null\r\n            character: []\r\n        }\r\n        this.changeQuote = this.changeQuote;\r\n    }\r\n \r\n    newSelection = (event) => {\r\n        this.setState({selectedCategory: event.target.value});\r\n    }\r\n\r\n    changeQuote = () => {\r\n        \r\n        const imgUrl = [default_quote, lagbaja, fawzy, lade];\r\n        const {selectedCategory, imgOne} = this.state;  \r\n        \r\n        for(let i = 0; i < imgUrl.length; i++){\r\n            if (selectedCategory !== 'Choose Category' && i !== 0){\r\n                switch (selectedCategory) {\r\n                    case 'islamic':\r\n                        this.setState({selectedCategory:selectedCategory, imgOne:imgUrl[1]});\r\n                        break;\r\n                    case 'motivational':\r\n                        this.setState({selectedCategory:selectedCategory, imgOne:imgUrl[2]});\r\n                    break;\r\n                    default:\r\n                        this.setState({selectedCategory:selectedCategory, imgOne:imgUrl[3]});\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                this.setState({selectedCategory:selectedCategory, imgOne:imgUrl[0]});\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        // this.setState({isLoading: true});\r\n        // \"https://swapi.co/api/people/1\"\r\n        fetch(\"https://healthruwords.p.rapidapi.com/v1/quotes/\", {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"healthruwords.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"2673355a8amsh6c0f7c17967bc54p19e076jsn968a3cc59c95\"\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => this.setState({isLoading: false, character:data[0]}));\r\n            // .then(results => results.json())\r\n            // .then(data => this.setState({isLoading: false, character: data}));\r\n    }\r\n\r\n    render(){\r\n    //    const text = this.state.isLoading ? 'Loading...' : this.state.person.name.first;\r\n        return(\r\n            <div>\r\n                <Fragment>\r\n                    <CurrentDay />\r\n                    <FormComponent changeQuote={this.changeQuote} newSelection={this.newSelection} selectedCategory={this.state.selectedCategory}/>\r\n                    <ImagesComponent imgOne={this.state.imgOne}  selectedCategory={this.state.selectedCategory} />\r\n                </Fragment>\r\n                <div id=\"api_div\">  \r\n                     {this.state.isLoading ? 'Loading...' : \r\n                        <div>  {this.state.character.title}\r\n                            <img src={this.state.character.media} />\r\n                            {/* <div> {this.state.person.name.first} </div> */}\r\n                            {/* <img src={this.state.person.picture.large} /> */}\r\n                        </div> \r\n                     }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ComponentHolder;","import React, {Component} from 'react';\nimport ComponentHolder from './componentHolder/componentsHolder';\nimport './css/custom.css';\n\n\nclass RandomQuotes extends Component{\n  constructor(){\n    super();\n  }\n\n  render(){\n\n    return (\n      <div className=\"quotesHouse\">\n        <div className=\"text-div\">\n            <h1>A Random Quote Generator</h1>\n            <ComponentHolder />\n            <h3 id=\"profile\">Hi, I'm Maryam. I code from Lagos, Nigeria</h3>\n        </div>\n        \n        \n      </div>\n    );\n  }\n}\n\nexport default RandomQuotes;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RandomQuotes from './rqgApp'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<RandomQuotes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}